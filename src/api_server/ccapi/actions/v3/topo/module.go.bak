package topo

import (
	"configcenter/src/common"
	"configcenter/src/common/core/cc/actions"
	"configcenter/src/common/base"
	"configcenter/src/common/blog"
	"configcenter/src/common/http/httpclient"
	"configcenter/src/sence-server/api"

	"github.com/emicklei/go-restful"
)

var module *moduleAction = &moduleAction{}

type moduleAction struct {
	base.BaseAction
	sencecli *api.Client
}

func init() {

	// register actions
	actions.RegisterNewAction(actions.Action{common.HTTP_CREATE, v3.API_VERSION+"/module/{appid}/{setid}", nil, module.CreateModule})
	actions.RegisterNewAction(actions.Action{common.HTTP_DELETE, v3.API_VERSION+"/module/{appid}/{setid}/{moduleid}", nil, module.DeleteModule})
	actions.RegisterNewAction(actions.Action{common.HTTP_UPDATE, v3.API_VERSION+"/module/{appid}/{setid}/{moduleid}", nil, module.UpdateModule})
	actions.RegisterNewAction(actions.Action{common.HTTP_SELECT_POST, v3.API_VERSION+"/module/search/{ownerid}/{appid}/{setid}", nil, module.SelectModule})
	actions.RegisterNewAction(actions.Action{common.HTTP_SELECT_POST, v3.API_VERSION+"/module/searchbyname/{ownerid}/{appid}/{setname}/{modulename}", nil, module.SelectModuleByName})

	// set cc api interface
	module.CreateAction()
	module.sencecli = api.NewClient(module.CC.TopoApi)
}

// CreateModule 创建 模型属性
func (cli *moduleAction) CreateModule(req *restful.Request, resp *restful.Response) {

	blog.Info("create object")

	appid := req.PathParameter("appid")
	setid := req.PathParameter("setid")

	cli.sencecli.SetAddress(cli.CC.TopoApi) // TODO: need to be removed

	cli.CallResponse(
		cli.sencecli.ReForwardCreateMetaModule(func(url, method string) (string, error) {
			return httpclient.ReqForward(req, url, method)
		}, appid, setid),
		resp)

}

// DeleteModule
func (cli *moduleAction) DeleteModule(req *restful.Request, resp *restful.Response) {

	blog.Info("delete module")

	appid := req.PathParameter("appid")
	setid := req.PathParameter("setid")
	moduleid := req.PathParameter("moduleid")

	cli.sencecli.SetAddress(cli.CC.TopoApi) // TODO: need to be removed

	cli.CallResponse(
		cli.sencecli.ReForwardDeleteMetaModule(func(url, method string) (string, error) {
			return httpclient.ReqForward(req, url, method)
		}, appid, setid, moduleid),
		resp)

}

// UpdateModule
func (cli *moduleAction) UpdateModule(req *restful.Request, resp *restful.Response) {

	blog.Info("update module")

	appid := req.PathParameter("appid")
	setid := req.PathParameter("setid")
	moduleid := req.PathParameter("moduleid")

	cli.sencecli.SetAddress(cli.CC.TopoApi) // TODO: need to be removed

	cli.CallResponse(
		cli.sencecli.ReForwardUpdateMetaModule(func(url, method string) (string, error) {
			return httpclient.ReqForward(req, url, method)
		}, appid, setid, moduleid),
		resp)

}

// SelectObjectAttWithParams
func (cli *moduleAction) SelectModule(req *restful.Request, resp *restful.Response) {

	blog.Info("select module ")
	ownerid := req.PathParameter("ownerid")
	appid := req.PathParameter("appid")
	setid := req.PathParameter("setid")

	cli.sencecli.SetAddress(cli.CC.TopoApi) // TODO: need to be removed
	cli.CallResponse(
		cli.sencecli.ReForwardSelectMetaModule(func(url, method string) (string, error) {
			return httpclient.ReqForward(req, url, method)
		}, ownerid, appid, setid),
		resp)
}

func (cli *moduleAction) SelectModuleByName(req *restful.Request, resp *restful.Response) {

	blog.Info("SelectModuleByName")
	ownerid := req.PathParameter("ownerid")
	appid := req.PathParameter("appid")
	moduleName := req.PathParameter("modulename")
	setName := req.PathParameter("setname")

	cli.sencecli.SetAddress(cli.CC.TopoApi) // TODO: need to be removed
	cli.CallResponse(
		cli.sencecli.ReForwardSelectMetaModule(func(url, method string) (string, error) {
			return httpclient.ReqForward(req, url, method)
		}, ownerid, appid, setid),
		resp)
}
